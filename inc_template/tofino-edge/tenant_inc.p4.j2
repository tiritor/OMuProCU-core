/****************************************************************************
 * Copyright 2021-present Timo Geier
 *                        (timo.geier@cs.hs-fulda.de)
 *                        Fulda University of Applied Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ****************************************************************************/

#include <core.p4>
#include <tna.p4>

#include "include/define.p4"
#include "include/header.p4"
#include "include/parser.p4"

// OTFs Includes
{{ otf_includes }}



/*************************************************************************
***************** I N G R E S S   P R O C E S S I N G ********************
*************************************************************************/
control TenantINCFrameworkIngress(inout headers_t hdr,
                              inout metadata_t meta,
                              in ingress_intrinsic_metadata_t ig_intr_md, 
                              in ingress_intrinsic_metadata_from_parser_t ig_prsr_md, 
                              inout ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md, 
                              inout ingress_intrinsic_metadata_for_tm_t ig_tm_md) {
    
    Hash<bit<32>>(HashAlgorithm_t.CRC32) hash_algo;
    selector_hash_t hash = 0;
    nexthop_id_t nexthop_id = 0;
    bit<8> ttl_dec = 0;

    ActionProfile(size = MAX_PROFILE_MEMBERS) lag_ecmp;
    Hash<bit<(HASH_WIDTH)>>(HashAlgorithm_t.IDENTITY) final_hash;

    ActionSelector(
        action_profile = lag_ecmp,
        hash           = final_hash,
        mode           = SELECTION_MODE,
        max_group_size = MAX_GROUP_SIZE,
        num_groups     = MAX_GROUPS) lag_ecmp_sel;

    action send(PortId_t port) {
        ig_tm_md.ucast_egress_port = port;
        ttl_dec = 0;
    }

    action drop() {
        ig_dprsr_md.drop_ctl = 1;
    }

    action l3_switch(PortId_t port, bit<48> new_mac_da, bit<48> new_mac_sa) {
        hdr.ethernet.dst_addr = new_mac_da;
        hdr.ethernet.src_addr = new_mac_sa;
        ttl_dec = 1;
        ig_tm_md.ucast_egress_port = port;
        
    }

    action set_nexthop(nexthop_id_t nexthop) {
        nexthop_id = nexthop;
    }

    action decrement (inout bit<8> value, in bit<8> amount) {
        value = value - amount;
    }

    table arp_table {
        key = { 
            hdr.arp.tpa : exact; 
            }
        actions = {
            set_nexthop;
        }
        default_action = set_nexthop(0);
        size = 65536;
    }

    table ipv4_host {
        key = { hdr.ipv4.dst_addr : exact; }
        actions = {
            set_nexthop;
            @defaultonly NoAction;
        }
        const default_action = NoAction();
        size = 65536;
    }

    table ipv4_lpm {
        key     = { hdr.ipv4.dst_addr : lpm; }
        actions = { set_nexthop; }
        
        default_action = set_nexthop(0);
        size           = 12288;
    }

    table nexthop {
        key = {
            nexthop_id : exact;
            hash       : selector;
        }
        actions = { send; drop; l3_switch; }
        size = 16384;
        implementation = lag_ecmp_sel;
    }

    apply {
        if (hdr.ipv4.isValid()) {

            hash = hash_algo.get({
                hdr.ipv4.src_addr,
                hdr.ipv4.dst_addr,
                hdr.ipv4.protocol,
                meta.l4_meta.src_port,
                meta.l4_meta.dst_port
            });

            // calc_ipv4_hashes.apply(hdr, meta, hash);
            // if (meta.ipv4_checksum_err == 0 && hdr.ipv4.ttl > 1) {
                if (!ipv4_host.apply().hit) {
                    ipv4_lpm.apply();
                }
            // }
        } else if (hdr.arp.isValid()) {
            arp_table.apply();
            // send(145);
        }

        nexthop.apply();

        // // [In-Network Tenant Controller --> OTFs]
        {{ in_network_tenant_controller_logic }}


        // // [Conditional Data Export (CDE)]
        if ((bool) meta.tenant_meta.export_flag) { 
            // Export the actual data to the tenant CNF
        }
        // // [Tenant Flow Filter]
        // Here would be the implementation for a filtering mechanism for the multi-tenant environment.


        if (hdr.ipv4.isValid()) {
            decrement(hdr.ipv4.ttl, ttl_dec);
        }

    }
    
}

/*************************************************************************
***************** E G R E S S   P R O C E S S I N G **********************
*************************************************************************/
control TenantINCFrameworkEgress(inout headers_t hdr,
                             inout metadata_t meta,
                             in egress_intrinsic_metadata_t eg_intr_md,
                             in egress_intrinsic_metadata_from_parser_t eg_prsr_md,
                             inout egress_intrinsic_metadata_for_deparser_t eg_dprsr_md,
                             inout egress_intrinsic_metadata_for_output_port_t eg_oport_md) {
   
    apply {

    }
}

/*************************************************************************
************************* S W I T C H ************************************
*************************************************************************/
Pipeline(TenantINCFrameworkIngressParser(),
         TenantINCFrameworkIngress(),
         TenantINCFrameworkIngressDeparser(),
         TenantINCFrameworkEgressParser(),
         TenantINCFrameworkEgress(),
         TenantINCFrameworkEgressDeparser()) pipe;
Switch(pipe) main;